import Head from "next/head";
import { useEffect, useState } from "react";
import styles from "../styles/Home.module.css";
import { activity } from "../types/activity";
import { athlete } from "../types/athlete";

const Home = () => {
  const [athlete, setAthlete] = useState<athlete | null>(null);
  const [activities, setActivities] = useState<activity[] | []>([]);
  const [accessToken, setAccessToken] = useState<string | null>(null);

  useEffect(() => {
    if (typeof window !== "undefined") {
      setAccessToken(localStorage.getItem("stravaAccessToken"));
    }
  }, []);

  const getAuthorizeUrl = (): string => {
    const baseUrl = "http://www.strava.com/oauth/authorize";

    const clientId = "98184";
    const clientIdParam = "client_id=" + clientId;

    const responseCodeParam = "response_type=code";

    // const redirectUrl = "http://localhost:3000/";
    const redirectUrl = "http://localhost:3008/exchange_token";
    const redirectUrlParam = "redirect_uri=" + redirectUrl;

    const approvalPromptParam = "approval_prompt=auto"; //force

    const scope = "activity:read";
    const scopeParam = "scope=" + scope;

    const authorizeUrl =
      baseUrl +
      "?" +
      clientIdParam +
      "&" +
      responseCodeParam +
      "&" +
      redirectUrlParam +
      "&" +
      approvalPromptParam +
      "&" +
      scopeParam;

    // "http://www.strava.com/oauth/authorize?client_id=98184&response_type=code&redirect_uri=http://localhost:3000/&approval_prompt=force&scope=activity:read"
    return authorizeUrl;
  };

  const fetchData = async (url: string, method: string = "GET") => {
    const response = await fetch(url, {
      method: method,
    });
    const data = await response.json();
    return data;
  };

  const getAthlete = async () => {
    const athlete = await fetchData(`/api/athlete/${accessToken}`);
    setAthlete(athlete);
  };

  const getActivities = async () => {
    const activities = await fetchData(`/api/activities/${accessToken}`);
    setActivities(activities);
  };

  const getPace = (time: number, distance: number): string => {
    const timeInMinutes: number = time / 60;

    const pace = (timeInMinutes / distance) * 1000;
    const paceFloat = Math.floor((pace % 1) * 100);
    const paceInt = Math.floor(pace);

    return paceInt + ":" + Math.round((paceFloat * 60) / 100);
  };

  const updateTodayActivity = async () => {
    const response = await fetch(
      `http://localhost:3008/api/notion/${accessToken}`,
      {
        method: "PATCH",
      }
    );
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Running Tracker</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Running Tracker</h1>
        <h2>from Runners to Runners</h2>
        <button
          onClick={() => {
            window.location.assign(getAuthorizeUrl());
          }}
        >
          Login to Strava
        </button>

        <div>
          <div>{accessToken}</div>
          <button onClick={getAthlete} disabled={!accessToken}>
            Show Athlete
          </button>
          <button onClick={getActivities} disabled={!accessToken}>
            Show Activities
          </button>
          <button onClick={updateTodayActivity} disabled={!accessToken}>
            Add Today Strava Activity to Notion
          </button>
        </div>

        <h2>Athlete Info</h2>
        {athlete ? (
          <pre key={athlete.id}>{JSON.stringify(athlete, null, 2)}</pre>
        ) : (
          <h3>No Athlete Info</h3>
        )}

        <br />

        <h2>Activities</h2>
        {activities.length > 0 ? (
          <div>
            {activities.map((activity: any) => {
              activity = {
                ...activity,
                map: "",
                pace: getPace(
                  parseFloat(activity.moving_time),
                  activity.distance
                ),
              };
              return (
                <pre key={activity.id}>{JSON.stringify(activity, null, 2)}</pre>
              );
            })}
          </div>
        ) : (
          <div>No Activity Fetched</div>
        )}
      </main>
    </div>
  );
};

export default Home;
